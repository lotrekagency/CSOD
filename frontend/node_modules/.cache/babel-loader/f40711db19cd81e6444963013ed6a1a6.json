{"remainingRequest":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/babel-loader/lib/index.js!/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/donaldo/chatlotrekfinal/csodproject/frontend/src/views/MessageEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/src/views/MessageEditor.vue","mtime":1571910217804},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { apiService } from \"../common/api.service.js\";\nimport axios from \"axios\";\nexport default {\n  name: \"MessageEditor\",\n  props: {\n    slug: {\n      type: String,\n      required: false // false perchè usiamo questo componente per modificare le domande\n\n    },\n    // ma lo stiamo già utilizzando di crearne di nuove\n    previousMessage: {\n      type: String,\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      messageBody: this.previousMessage || null,\n      error: null // selectedFile: null\n      //files: new FormData()\n      // message_cover: '',\n\n    };\n  },\n  beforeRouteEnter: function () {\n    var _beforeRouteEnter = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(to, from, next) {\n      var endpoint;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(to.params.slug !== undefined)) {\n                _context.next = 4;\n                break;\n              }\n\n              endpoint = \"/api/messagestext/\".concat(to.params.slug, \"/\");\n              _context.next = 4;\n              return apiService(endpoint).then(function (data) {\n                to.params.previousMessage = data.content;\n              });\n\n            case 4:\n              return _context.abrupt(\"return\", next());\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function beforeRouteEnter(_x, _x2, _x3) {\n      return _beforeRouteEnter.apply(this, arguments);\n    }\n\n    return beforeRouteEnter;\n  }(),\n  methods: {\n    onSubmit: function onSubmit() {\n      var _this = this;\n\n      if (!this.messageBody) {\n        this.error = \"Il campo non può essere vuoto!\";\n      } else if (this.messageBody.length > 240) {\n        this.error = \"Non superare i 240 caratteri\";\n      } else {\n        var endpoint = \"/api/messagestext/\";\n        var method = \"POST\";\n\n        if (this.previousMessage) {\n          method = \"PUT\";\n          endpoint += \"\".concat(this.slug, \"/\");\n        }\n\n        apiService(endpoint, method, {\n          content: this.messageBody,\n          cover: this.message_cover\n        }).then(function (message_data) {\n          _this.$router.push({\n            name: \"message\",\n            params: {\n              slug: message_data.slug\n            }\n          });\n        });\n      }\n    },\n    onFileChanged: function onFileChanged(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    onUpload: function onUpload() {\n      var formData = new FormData();\n      formData.append('myFile', this.selectedFile, this.selectedFile.name);\n      axios.post('http://localhost:8000/messagestext/messagetext/', formData);\n    }\n  },\n  created: function created() {\n    document.title = \"Message Editor - CSOD\";\n  }\n};",{"version":3,"sources":["MessageEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAAA,UAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA,KAFA,CAEA;;AAFA,KADA;AAIA;AACA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AALA,GAHA;AAcA,EAAA,IAdA,kBAcA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,KAAA,eAAA,IAAA,IADA;AAEA,MAAA,KAAA,EAAA,IAFA,CAGA;AACA;AACA;;AALA,KAAA;AAOA,GAtBA;AAwBA,EAAA,gBAxBA;AAAA;AAAA;AAAA,6CAwBA,EAxBA,EAwBA,IAxBA,EAwBA,IAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAyBA,EAAA,CAAA,MAAA,CAAA,IAAA,KAAA,SAzBA;AAAA;AAAA;AAAA;;AA0BA,cAAA,QA1BA,+BA0BA,EAAA,CAAA,MAAA,CAAA,IA1BA;AAAA;AAAA,qBA2BA,UAAA,CAAA,QAAA,CAAA,CACA,IADA,CACA,UAAA,IAAA,EAAA;AACA,gBAAA,EAAA,CAAA,MAAA,CAAA,eAAA,GAAA,IAAA,CAAA,OAAA;AACA,eAHA,CA3BA;;AAAA;AAAA,+CAgCA,IAAA,EAhCA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmCA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AAAA;;AACA,UAAA,CAAA,KAAA,WAAA,EAAA;AACA,aAAA,KAAA,GAAA,gCAAA;AACA,OAFA,MAEA,IAAA,KAAA,WAAA,CAAA,MAAA,GAAA,GAAA,EAAA;AACA,aAAA,KAAA,GAAA,8BAAA;AACA,OAFA,MAEA;AACA,YAAA,QAAA,uBAAA;AACA,YAAA,MAAA,GAAA,MAAA;;AACA,YAAA,KAAA,eAAA,EAAA;AACA,UAAA,MAAA,GAAA,KAAA;AACA,UAAA,QAAA,cAAA,KAAA,IAAA,MAAA;AACA;;AACA,QAAA,UAAA,CAAA,QAAA,EAAA,MAAA,EAAA;AAAA,UAAA,OAAA,EAAA,KAAA,WAAA;AAAA,UAAA,KAAA,EAAA,KAAA;AAAA,SAAA,CAAA,CACA,IADA,CACA,UAAA,YAAA,EAAA;AACA,UAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA;AACA,YAAA,IAAA,EAAA,SADA;AAEA,YAAA,MAAA,EAAA;AAAA,cAAA,IAAA,EAAA,YAAA,CAAA;AAAA;AAFA,WAAA;AAIA,SANA;AAOA;AACA,KArBA;AAsBA,IAAA,aAtBA,yBAsBA,KAtBA,EAsBA;AACA,WAAA,YAAA,GAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA,KAxBA;AAyBA,IAAA,QAzBA,sBAyBA;AACA,UAAA,QAAA,GAAA,IAAA,QAAA,EAAA;AACA,MAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,KAAA,YAAA,EAAA,KAAA,YAAA,CAAA,IAAA;AACA,MAAA,KAAA,CAAA,IAAA,CAAA,iDAAA,EAAA,QAAA;AACA;AA7BA,GAnCA;AAkEA,EAAA,OAlEA,qBAkEA;AACA,IAAA,QAAA,CAAA,KAAA,GAAA,uBAAA;AACA;AApEA,CAAA","sourcesContent":["<template lang=\"html\">\n    <div class=\"container mt-2\">\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <h1 class=\"mb-3\">Aggiungi un messaggio</h1>\n                <form @submit.prevent=\"onSubmit\">\n                  <textarea\n                      v-model=\"messageBody\"\n                      class=\"form-control\"\n                      placeholder=\"Scrivi qualcosa...\"\n                      rows=\"3\">\n                  </textarea>\n                  <!-- <label class=\"select-file\"> -->\n                    <input type=\"file\" @change=\"onFileChanged\">\n                    <button\n                    class=\"btn btn-success\"\n                    type=\"submit\" @click=\"onUpload\">Invio</button>\n                  <p class=\"muted error mt-2\">{{ error }}</p>\n                    <!-- <input type=\"type\" name=\"file\" @change=\"fileChange($event, index)\">\n                  </label> -->\n                </form>\n                <br>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { apiService } from \"../common/api.service.js\";\nimport axios from \"axios\";\nexport default {\n    name: \"MessageEditor\",\n\n    props: {\n        slug: {\n          type: String,\n          required: false    // false perchè usiamo questo componente per modificare le domande\n        },                   // ma lo stiamo già utilizzando di crearne di nuove\n        previousMessage:{\n          type: String,\n          required: false\n        }\n    },\n\n    data() {\n      return{\n        messageBody: this.previousMessage || null,\n        error: null,\n        // selectedFile: null\n        //files: new FormData()\n        // message_cover: '',\n      }\n    },\n\n    async beforeRouteEnter(to, from, next) {\n      if (to.params.slug !== undefined) {\n        let endpoint = `/api/messagestext/${to.params.slug}/`;\n        await apiService(endpoint)\n                .then((data) => {\n                  to.params.previousMessage = data.content;\n                })\n      }\n      return next();\n    },\n\n    methods: {\n      onSubmit() {\n        if (!this.messageBody) {\n            this.error = \"Il campo non può essere vuoto!\"\n        } else if (this.messageBody.length > 240) {\n            this.error= \"Non superare i 240 caratteri\"\n        } else {\n          let endpoint = `/api/messagestext/`;\n          let method = \"POST\";\n          if (this.previousMessage) {\n            method = \"PUT\";\n            endpoint += `${this.slug}/`;\n          }\n          apiService(endpoint, method, {content: this.messageBody, cover: this.message_cover})\n              .then(message_data => {\n                  this.$router.push({\n                      name: \"message\",\n                      params: { slug: message_data.slug }\n                  });\n              });\n        }\n      },\n      onFileChanged(event) {\n        this.selectedFile = event.target.files[0]\n      },\n      onUpload() {\n        const formData = new FormData()\n        formData.append('myFile', this.selectedFile, this.selectedFile.name)\n        axios.post('http://localhost:8000/messagestext/messagetext/', formData)\n      }\n    },\n      created() {\n        document.title=\"Message Editor - CSOD\";\n      }\n  };\n\n</script>\n\n<style lang=\"css\" scoped>\n.submit-file{\n  visibility: hidden;\n}\n</style>\n"],"sourceRoot":"src/views"}]}