{"remainingRequest":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/babel-loader/lib/index.js!/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/donaldo/chatlotrekfinal/csodproject/frontend/src/views/AnswerEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/src/views/AnswerEditor.vue","mtime":1571907841806},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { apiService } from \"../common/api.service\";\nexport default {\n  name: \"previousAnsweror\",\n  props: {\n    id: {\n      type: Number,\n      required: true\n    },\n    previousAnswer: {\n      type: String,\n      required: true\n    },\n    messageSlug: {\n      type: String,\n      required: true\n    }\n  },\n  beforeRouteEnter: function () {\n    var _beforeRouteEnter = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(to, from, next) {\n      var endpoint;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              endpoint = \"/api/answers/\".concat(to.params.id, \"/\");\n              _context.next = 3;\n              return apiService(endpoint).then(function (data) {\n                to.params.previousAnswer = data.body;\n                to.params.messageSlug = data.message_slug;\n              });\n\n            case 3:\n              return _context.abrupt(\"return\", next());\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function beforeRouteEnter(_x, _x2, _x3) {\n      return _beforeRouteEnter.apply(this, arguments);\n    }\n\n    return beforeRouteEnter;\n  }(),\n  data: function data() {\n    return {\n      answerBody: this.previousAnswer,\n      error: null\n    };\n  },\n  methods: {\n    onSubmit: function onSubmit() {\n      var _this = this;\n\n      if (this.answerBody) {\n        var endpoint = \"/api/answers/\".concat(this.id, \"/\");\n        apiService(endpoint, \"PUT\", {\n          body: this.answerBody\n        }).then(function () {\n          _this.$router.push({\n            //reindirizzamento alla pagina message\n            name: \"message\",\n            params: {\n              slug: _this.messageSlug\n            }\n          });\n        });\n      } else {\n        this.error = \"Il campo  non può essere vuoto!\";\n      }\n    }\n  } // methods: {\n  //   async getAnswerData() {\n  //     let endpoint = `/api/answers/${this.id}/`\n  //     await apiService(endpoint)\n  //             .then(data => {\n  //                 this.answerBody = data.body;\n  //             })\n  //   }\n  // },\n  //\n  // created() {\n  //   this.getAnswerData();\n  // }\n\n};",{"version":3,"sources":["AnswerEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAA,UAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,kBADA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,EAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KALA;AASA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AATA,GAHA;AAkBA,EAAA,gBAlBA;AAAA;AAAA;AAAA,6CAkBA,EAlBA,EAkBA,IAlBA,EAkBA,IAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA,cAAA,QAnBA,0BAmBA,EAAA,CAAA,MAAA,CAAA,EAnBA;AAAA;AAAA,qBAoBA,UAAA,CAAA,QAAA,CAAA,CACA,IADA,CACA,UAAA,IAAA,EAAA;AACA,gBAAA,EAAA,CAAA,MAAA,CAAA,cAAA,GAAA,IAAA,CAAA,IAAA;AACA,gBAAA,EAAA,CAAA,MAAA,CAAA,WAAA,GAAA,IAAA,CAAA,YAAA;AACA,eAJA,CApBA;;AAAA;AAAA,+CAyBA,IAAA,EAzBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA4BA,EAAA,IA5BA,kBA4BA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,KAAA,cADA;AAEA,MAAA,KAAA,EAAA;AAFA,KAAA;AAIA,GAjCA;AAmCA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AAAA;;AACA,UAAA,KAAA,UAAA,EAAA;AACA,YAAA,QAAA,0BAAA,KAAA,EAAA,MAAA;AACA,QAAA,UAAA,CAAA,QAAA,EAAA,KAAA,EAAA;AAAA,UAAA,IAAA,EAAA,KAAA;AAAA,SAAA,CAAA,CACA,IADA,CACA,YAAA;AACA,UAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA;AAAA;AACA,YAAA,IAAA,EAAA,SADA;AAEA,YAAA,MAAA,EAAA;AAAA,cAAA,IAAA,EAAA,KAAA,CAAA;AAAA;AAFA,WAAA;AAIA,SANA;AAOA,OATA,MASA;AACA,aAAA,KAAA,GAAA,iCAAA;AACA;AACA;AAdA,GAnCA,CAmDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA/DA,CAAA","sourcesContent":["<template lang=\"html\">\n  <div class=\"container mt-2\">\n      <div class=\"row\">\n          <div class=\"col-12\">\n              <h1 class=\"mb-3\">Modifica la tua risposta</h1>\n              <form @submit.prevent=\"onSubmit\">\n                <textarea\n                    v-model=\"answerBody\"\n                    class=\"form-control\"\n                    rows=\"3\">\n                </textarea>\n                <br>\n                <button\n                  class=\"btn btn-success\"\n                  type=\"submit\"\n                  > Pubblica\n                </button>\n              </form>\n              <p class=\"error mt-2\">{{ error }}</p>\n          </div>\n      </div>\n  </div>\n</template>\n\n<script>\nimport { apiService } from \"../common/api.service\";\n\nexport default {\n  name: \"previousAnsweror\",\n\n  props: {\n    id:{\n      type: Number,\n      required: true\n    },\n    previousAnswer:{\n      type: String,\n      required: true\n    },\n    messageSlug: {\n      type: String,\n      required:true\n    }\n  },\n\n  async beforeRouteEnter(to, from, next) {\n      let endpoint = `/api/answers/${to.params.id}/`\n      await apiService(endpoint)\n              .then(data => {\n                  to.params.previousAnswer = data.body;\n                  to.params.messageSlug = data.message_slug;\n      })\n    return next();\n  },\n\n  data() {\n    return{\n      answerBody: this.previousAnswer,\n      error: null\n    }\n  },\n\n  methods: {\n    onSubmit() {\n      if(this.answerBody){\n         let endpoint = `/api/answers/${this.id}/`;\n         apiService(endpoint, \"PUT\", { body: this.answerBody })\n        .then(() => {\n            this.$router.push({ //reindirizzamento alla pagina message\n                name: \"message\",\n                params: { slug: this.messageSlug }\n            })\n        })\n    } else {\n      this.error = \"Il campo  non può essere vuoto!\";\n    }\n  }\n}\n  // methods: {\n  //   async getAnswerData() {\n  //     let endpoint = `/api/answers/${this.id}/`\n  //     await apiService(endpoint)\n  //             .then(data => {\n  //                 this.answerBody = data.body;\n  //             })\n  //   }\n  // },\n  //\n  // created() {\n  //   this.getAnswerData();\n  // }\n}\n</script>\n\n<style lang=\"css\" scoped>\n</style>\n"],"sourceRoot":"src/views"}]}