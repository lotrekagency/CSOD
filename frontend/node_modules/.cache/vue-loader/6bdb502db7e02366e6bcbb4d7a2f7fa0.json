{"remainingRequest":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/donaldo/chatlotrekfinal/csodproject/frontend/src/views/MessageEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/src/views/MessageEditor.vue","mtime":1571910217804},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"../common/api.service.js\";\nimport axios from \"axios\";\nexport default {\n    name: \"MessageEditor\",\n\n    props: {\n        slug: {\n          type: String,\n          required: false    // false perchè usiamo questo componente per modificare le domande\n        },                   // ma lo stiamo già utilizzando di crearne di nuove\n        previousMessage:{\n          type: String,\n          required: false\n        }\n    },\n\n    data() {\n      return{\n        messageBody: this.previousMessage || null,\n        error: null,\n        // selectedFile: null\n        //files: new FormData()\n        // message_cover: '',\n      }\n    },\n\n    async beforeRouteEnter(to, from, next) {\n      if (to.params.slug !== undefined) {\n        let endpoint = `/api/messagestext/${to.params.slug}/`;\n        await apiService(endpoint)\n                .then((data) => {\n                  to.params.previousMessage = data.content;\n                })\n      }\n      return next();\n    },\n\n    methods: {\n      onSubmit() {\n        if (!this.messageBody) {\n            this.error = \"Il campo non può essere vuoto!\"\n        } else if (this.messageBody.length > 240) {\n            this.error= \"Non superare i 240 caratteri\"\n        } else {\n          let endpoint = `/api/messagestext/`;\n          let method = \"POST\";\n          if (this.previousMessage) {\n            method = \"PUT\";\n            endpoint += `${this.slug}/`;\n          }\n          apiService(endpoint, method, {content: this.messageBody, cover: this.message_cover})\n              .then(message_data => {\n                  this.$router.push({\n                      name: \"message\",\n                      params: { slug: message_data.slug }\n                  });\n              });\n        }\n      },\n      onFileChanged(event) {\n        this.selectedFile = event.target.files[0]\n      },\n      onUpload() {\n        const formData = new FormData()\n        formData.append('myFile', this.selectedFile, this.selectedFile.name)\n        axios.post('http://localhost:8000/messagestext/messagetext/', formData)\n      }\n    },\n      created() {\n        document.title=\"Message Editor - CSOD\";\n      }\n  };\n\n",{"version":3,"sources":["MessageEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MessageEditor.vue","sourceRoot":"src/views","sourcesContent":["<template lang=\"html\">\n    <div class=\"container mt-2\">\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <h1 class=\"mb-3\">Aggiungi un messaggio</h1>\n                <form @submit.prevent=\"onSubmit\">\n                  <textarea\n                      v-model=\"messageBody\"\n                      class=\"form-control\"\n                      placeholder=\"Scrivi qualcosa...\"\n                      rows=\"3\">\n                  </textarea>\n                  <!-- <label class=\"select-file\"> -->\n                    <input type=\"file\" @change=\"onFileChanged\">\n                    <button\n                    class=\"btn btn-success\"\n                    type=\"submit\" @click=\"onUpload\">Invio</button>\n                  <p class=\"muted error mt-2\">{{ error }}</p>\n                    <!-- <input type=\"type\" name=\"file\" @change=\"fileChange($event, index)\">\n                  </label> -->\n                </form>\n                <br>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { apiService } from \"../common/api.service.js\";\nimport axios from \"axios\";\nexport default {\n    name: \"MessageEditor\",\n\n    props: {\n        slug: {\n          type: String,\n          required: false    // false perchè usiamo questo componente per modificare le domande\n        },                   // ma lo stiamo già utilizzando di crearne di nuove\n        previousMessage:{\n          type: String,\n          required: false\n        }\n    },\n\n    data() {\n      return{\n        messageBody: this.previousMessage || null,\n        error: null,\n        // selectedFile: null\n        //files: new FormData()\n        // message_cover: '',\n      }\n    },\n\n    async beforeRouteEnter(to, from, next) {\n      if (to.params.slug !== undefined) {\n        let endpoint = `/api/messagestext/${to.params.slug}/`;\n        await apiService(endpoint)\n                .then((data) => {\n                  to.params.previousMessage = data.content;\n                })\n      }\n      return next();\n    },\n\n    methods: {\n      onSubmit() {\n        if (!this.messageBody) {\n            this.error = \"Il campo non può essere vuoto!\"\n        } else if (this.messageBody.length > 240) {\n            this.error= \"Non superare i 240 caratteri\"\n        } else {\n          let endpoint = `/api/messagestext/`;\n          let method = \"POST\";\n          if (this.previousMessage) {\n            method = \"PUT\";\n            endpoint += `${this.slug}/`;\n          }\n          apiService(endpoint, method, {content: this.messageBody, cover: this.message_cover})\n              .then(message_data => {\n                  this.$router.push({\n                      name: \"message\",\n                      params: { slug: message_data.slug }\n                  });\n              });\n        }\n      },\n      onFileChanged(event) {\n        this.selectedFile = event.target.files[0]\n      },\n      onUpload() {\n        const formData = new FormData()\n        formData.append('myFile', this.selectedFile, this.selectedFile.name)\n        axios.post('http://localhost:8000/messagestext/messagetext/', formData)\n      }\n    },\n      created() {\n        document.title=\"Message Editor - CSOD\";\n      }\n  };\n\n</script>\n\n<style lang=\"css\" scoped>\n.submit-file{\n  visibility: hidden;\n}\n</style>\n"]}]}