{"remainingRequest":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/donaldo/chatlotrekfinal/csodproject/frontend/src/components/Answer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/src/components/Answer.vue","mtime":1571911999614},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"../common/api.service\";\nexport default {\n    name: \"AnswerComponent\",\n    props: {\n        answer: {\n          type: Object,\n          required: true\n        },\n        requestUser: {\n          type: String,\n          required: true\n        }\n    },\n\n    data() {\n        return {\n            userLikedAnswer: this.answer.user_has_voted,\n            likesNumber: this.answer.likes_count\n        }\n    },\n\n    computed: {\n        isAnswerAuthor() {\n            return this.answer.author === this.requestUser;\n        }\n    },\n\n    methods: {\n        toggleLike() {\n            this.userLikedAnswer === false\n                ? this.likeAnswer()\n                : this.unLikeAnswer()\n        },\n        likeAnswer() {\n            this.userLikedAnswer = true;\n            this.likesNumber += 1;\n            let endpoint = `/api/answers/${this.answer.id}/like/`;\n            apiService(endpoint, \"POST\");\n        },\n        unLikeAnswer() {\n            this.userLikedAnswer = false;\n            this.likesNumber -= 1;\n            let endpoint = `/api/answers/${this.answer.id}/like/`;\n            apiService(endpoint, \"DELETE\"); // se non importo apiService, quando faccio refresh non mi \"salva\"\n        },                                  // il like appena fatto\n        triggerDeleteAnswer() {\n            this.$emit(\"delete-answer\", this.answer)\n        },\n\n    }\n}\n",{"version":3,"sources":["Answer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Answer.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"html\">\n    <div class=\"single-answer\">\n        <p class=\"text-muted\">\n          <strong>{{ answer.author }}</strong> ha risposto il {{ answer.created_at }}\n        </p>\n        <p>{{ answer.body }}</p>\n        <div v-if=\"isAnswerAuthor\" class=\"answer-owner\">\n            <router-link\n                :to=\"{ name: 'answer-editor', params: { id: answer.id } }\"\n                class=\"btn btn-sm btn-outline-secondary mr-1\"\n                > <span>Modifica</span>\n            </router-link>\n\n            <button\n                class=\"btn btn-sm btn-outline-danger\"\n                @click=\"triggerDeleteAnswer\"\n                >Cancella\n            </button>\n        </div>\n        <div v-else class=\"like-answer\">\n            <button\n                class=\"btn btn-sm\"\n                @click=\"toggleLike\"\n                :class=\"{\n                  'btn-danger': userLikedAnswer,\n                  'btn-outline-danger': !userLikedAnswer,\n                  }\">\n                <strong>Mi piace [{{ likesNumber }}]</strong>\n            </button>\n        </div>\n        <hr>\n    </div>\n</template>\n\n<script>\nimport { apiService } from \"../common/api.service\";\nexport default {\n    name: \"AnswerComponent\",\n    props: {\n        answer: {\n          type: Object,\n          required: true\n        },\n        requestUser: {\n          type: String,\n          required: true\n        }\n    },\n\n    data() {\n        return {\n            userLikedAnswer: this.answer.user_has_voted,\n            likesNumber: this.answer.likes_count\n        }\n    },\n\n    computed: {\n        isAnswerAuthor() {\n            return this.answer.author === this.requestUser;\n        }\n    },\n\n    methods: {\n        toggleLike() {\n            this.userLikedAnswer === false\n                ? this.likeAnswer()\n                : this.unLikeAnswer()\n        },\n        likeAnswer() {\n            this.userLikedAnswer = true;\n            this.likesNumber += 1;\n            let endpoint = `/api/answers/${this.answer.id}/like/`;\n            apiService(endpoint, \"POST\");\n        },\n        unLikeAnswer() {\n            this.userLikedAnswer = false;\n            this.likesNumber -= 1;\n            let endpoint = `/api/answers/${this.answer.id}/like/`;\n            apiService(endpoint, \"DELETE\"); // se non importo apiService, quando faccio refresh non mi \"salva\"\n        },                                  // il like appena fatto\n        triggerDeleteAnswer() {\n            this.$emit(\"delete-answer\", this.answer)\n        },\n\n    }\n}\n</script>\n\n<style lang=\"css\" scoped>\n</style>\n"]}]}