{"remainingRequest":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/donaldo/chatlotrekfinal/csodproject/frontend/src/views/Message.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/src/views/Message.vue","mtime":1571913211861},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"../common/api.service\";\nimport AnswerComponent from \"../components/Answer.vue\";\nimport MessageActions from \"../components/MessageActions.vue\";\nexport default {\n    name: \"Message\",\n\n    props: {\n        slug:{\n            type: String,\n            required: true\n        }\n    },\n\n    components: {\n        AnswerComponent,\n        MessageActions\n\n    },\n\n    data() {\n        return {\n            message: {},\n            loadingAnswers: false,\n            answers: [],\n            userHasAnswered: false,\n            showForm: false,\n            newAnswerBody: null,\n            error: null,\n            next:null,\n            requestUser:null\n        }\n    },\n\n    computed: {\n        isOwner() {\n            return this.message.author === this.requestUser;\n        },\n        notFound() {\n            return this.message[\"detail\"];\n        }\n    },\n\n    methods: {\n        setPageTitle(title) {\n            document.title= title;\n        },\n        setRequestUser() {\n            this.requestUser = window.localStorage.getItem(\"username\");\n        },\n        getMessageData() {\n            let endpoint = `/api/messagestext/${this.slug}/`;\n            apiService(endpoint)\n                .then(data => {\n                  this.message = data;\n                  this.userHasAnswered = data.user_has_answered;\n                  this.setPageTitle(data.content); //funzione per far si che il title sia uguale al contenuto del message\n                })\n        },\n        getMessageAnswers() {\n            let endpoint = `/api/messagestext/${this.slug}/answers/`;\n            if(this.next) {\n               endpoint = this.next;\n            }\n            this.loadingAnswers = true;\n            apiService(endpoint)\n                .then(data => {\n                    this.answers.push(...data.results);\n                    this.loadingAnswers = false;\n                    if (data.next) {\n                        this.next = data.next;\n                    } else {\n                      this.next = null;\n                    }\n                })\n        },\n        onSubmit() {\n          if (this.newAnswerBody) {\n              let endpoint = `/api/messagestext/${this.slug}/answer/`;\n              apiService(endpoint, \"POST\", { body: this.newAnswerBody})\n                  .then(data => {\n\n                    this.answers.unshift(data);\n                  })\n              this.newAnswerBody = null;\n              this.showForm = false;\n              this.userHasAnswered = true;\n              if(this.error) {\n                 this.error = null;\n              }\n          } else {\n              this.error = \"Il campo non pu√≤ essere vuoto!\"\n          }\n      },\n       async deleteAnswer(answer) {\n          let endpoint = `/api/answers/${answer.id}/`;\n          try{\n             await apiService(endpoint, \"DELETE\");\n             //this.answers.splice(this.answers.indexOf(answer), 1);\n             this.$delete(this.answers, this.answers.indexOf(answer))\n             // this.userHasAnswered = false;\n          }\n          catch (err) {\n             console.log(err);\n          }\n      }\n    },\n\n    created(){\n       this.getMessageData();\n       this.getMessageAnswers();\n       this.setRequestUser();\n    }\n}\n",{"version":3,"sources":["Message.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Message.vue","sourceRoot":"src/views","sourcesContent":["<template lang=\"html\">\n    <div class=\"single-question mt-2\">\n\n        <div v-if=\"notFound\" class=\"container\">\n            <h1 class=\"notFound\">Messaggio non trovato!</h1>\n        </div>\n        <div v-else class=\"container\">\n            <h1>{{ message.content }}</h1>\n\n            <MessageActions\n                v-if=\"isOwner\"\n                :slug=\"slug\"\n            />\n\n            <!-- <iframe> {{ message.cover }}</iframe> -->\n            <span> {{ message.cover }}</span>\n\n            <p class=\"mb-0\">Messaggio aggiunto da</p>\n                <span class=\"author_name\">{{ message.author }}</span>\n            </p>\n            <p>{{ message.created_at }}</p>\n            <hr>\n            <!-- <template v-if=\"userHasAnswered\">\n              <p class=\"answer_added\">Hai risposto a questo messaggio</p>\n            </template> -->\n            <template v-if=\"showForm\">\n              <form class=\"card\" @submit.prevent=\"onSubmit\">\n                <div class=\"card-header px-3\">\n                  Aggiungi una risposta al messaggio\n                </div>\n                <div class=\"card-block\">\n                  <textarea\n                    v-model=\"newAnswerBody\"\n                    classs=\"form-control\"\n                    placeholder=\"Aggiungi una risposta al messaggio\"\n                    rows=\"5\"\n                  ></textarea>\n                </div>\n                <div class=\"card-footer px-3\">\n                  <button type=\"submit\" class=\"btn btn-sm btn-success\">Aggiungi Risposta</button>\n                </div>\n              </form>\n              <p class=\" error mt-2\">{{ error}}</p>\n            </template>\n            <template v-else>\n              <button\n                class=\"btn btn-sm btn-success\"\n                @click=\"showForm = true\"\n                >Rispondi al messaggio</button>\n            </template>\n\n            <hr>\n            <AnswerComponent\n              v-for=\"(answer, index) in answers\"\n              :answer=\"answer\"\n              :requestUser=\"requestUser\"\n              :key=\"index\"\n              @delete-answer=\"deleteAnswer\"\n            />\n            <div class=\"my-4\">\n              <p v-show=\"loadingAnswers\">...loading...</p>\n              <button\n                 v-show=\"next\"\n                 @click=\"getMessageAnswers\"\n                 class=\"btn btn-sm btn-outline-success\"\n                 >Carica Ancora\n              </button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { apiService } from \"../common/api.service\";\nimport AnswerComponent from \"../components/Answer.vue\";\nimport MessageActions from \"../components/MessageActions.vue\";\nexport default {\n    name: \"Message\",\n\n    props: {\n        slug:{\n            type: String,\n            required: true\n        }\n    },\n\n    components: {\n        AnswerComponent,\n        MessageActions\n\n    },\n\n    data() {\n        return {\n            message: {},\n            loadingAnswers: false,\n            answers: [],\n            userHasAnswered: false,\n            showForm: false,\n            newAnswerBody: null,\n            error: null,\n            next:null,\n            requestUser:null\n        }\n    },\n\n    computed: {\n        isOwner() {\n            return this.message.author === this.requestUser;\n        },\n        notFound() {\n            return this.message[\"detail\"];\n        }\n    },\n\n    methods: {\n        setPageTitle(title) {\n            document.title= title;\n        },\n        setRequestUser() {\n            this.requestUser = window.localStorage.getItem(\"username\");\n        },\n        getMessageData() {\n            let endpoint = `/api/messagestext/${this.slug}/`;\n            apiService(endpoint)\n                .then(data => {\n                  this.message = data;\n                  this.userHasAnswered = data.user_has_answered;\n                  this.setPageTitle(data.content); //funzione per far si che il title sia uguale al contenuto del message\n                })\n        },\n        getMessageAnswers() {\n            let endpoint = `/api/messagestext/${this.slug}/answers/`;\n            if(this.next) {\n               endpoint = this.next;\n            }\n            this.loadingAnswers = true;\n            apiService(endpoint)\n                .then(data => {\n                    this.answers.push(...data.results);\n                    this.loadingAnswers = false;\n                    if (data.next) {\n                        this.next = data.next;\n                    } else {\n                      this.next = null;\n                    }\n                })\n        },\n        onSubmit() {\n          if (this.newAnswerBody) {\n              let endpoint = `/api/messagestext/${this.slug}/answer/`;\n              apiService(endpoint, \"POST\", { body: this.newAnswerBody})\n                  .then(data => {\n\n                    this.answers.unshift(data);\n                  })\n              this.newAnswerBody = null;\n              this.showForm = false;\n              this.userHasAnswered = true;\n              if(this.error) {\n                 this.error = null;\n              }\n          } else {\n              this.error = \"Il campo non pu√≤ essere vuoto!\"\n          }\n      },\n       async deleteAnswer(answer) {\n          let endpoint = `/api/answers/${answer.id}/`;\n          try{\n             await apiService(endpoint, \"DELETE\");\n             //this.answers.splice(this.answers.indexOf(answer), 1);\n             this.$delete(this.answers, this.answers.indexOf(answer))\n             // this.userHasAnswered = false;\n          }\n          catch (err) {\n             console.log(err);\n          }\n      }\n    },\n\n    created(){\n       this.getMessageData();\n       this.getMessageAnswers();\n       this.setRequestUser();\n    }\n}\n</script>\n\n<style lang=\"css\" scoped>\n\n.container{\n  margin-top: 20px;\n  margin-bottom: 5px;\n}\n.answer_added {\n  color: green;\n  font-weight: bold;\n}\n.error {\n  color: red;\n  font-weight: bold;\n}\n</style>\n"]}]}