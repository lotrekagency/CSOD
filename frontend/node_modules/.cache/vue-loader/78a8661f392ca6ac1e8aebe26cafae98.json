{"remainingRequest":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/donaldo/chatlotrekfinal/csodproject/frontend/src/views/AnswerEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/src/views/AnswerEditor.vue","mtime":1571907841806},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donaldo/chatlotrekfinal/csodproject/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"../common/api.service\";\n\nexport default {\n  name: \"previousAnsweror\",\n\n  props: {\n    id:{\n      type: Number,\n      required: true\n    },\n    previousAnswer:{\n      type: String,\n      required: true\n    },\n    messageSlug: {\n      type: String,\n      required:true\n    }\n  },\n\n  async beforeRouteEnter(to, from, next) {\n      let endpoint = `/api/answers/${to.params.id}/`\n      await apiService(endpoint)\n              .then(data => {\n                  to.params.previousAnswer = data.body;\n                  to.params.messageSlug = data.message_slug;\n      })\n    return next();\n  },\n\n  data() {\n    return{\n      answerBody: this.previousAnswer,\n      error: null\n    }\n  },\n\n  methods: {\n    onSubmit() {\n      if(this.answerBody){\n         let endpoint = `/api/answers/${this.id}/`;\n         apiService(endpoint, \"PUT\", { body: this.answerBody })\n        .then(() => {\n            this.$router.push({ //reindirizzamento alla pagina message\n                name: \"message\",\n                params: { slug: this.messageSlug }\n            })\n        })\n    } else {\n      this.error = \"Il campo  non può essere vuoto!\";\n    }\n  }\n}\n  // methods: {\n  //   async getAnswerData() {\n  //     let endpoint = `/api/answers/${this.id}/`\n  //     await apiService(endpoint)\n  //             .then(data => {\n  //                 this.answerBody = data.body;\n  //             })\n  //   }\n  // },\n  //\n  // created() {\n  //   this.getAnswerData();\n  // }\n}\n",{"version":3,"sources":["AnswerEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AnswerEditor.vue","sourceRoot":"src/views","sourcesContent":["<template lang=\"html\">\n  <div class=\"container mt-2\">\n      <div class=\"row\">\n          <div class=\"col-12\">\n              <h1 class=\"mb-3\">Modifica la tua risposta</h1>\n              <form @submit.prevent=\"onSubmit\">\n                <textarea\n                    v-model=\"answerBody\"\n                    class=\"form-control\"\n                    rows=\"3\">\n                </textarea>\n                <br>\n                <button\n                  class=\"btn btn-success\"\n                  type=\"submit\"\n                  > Pubblica\n                </button>\n              </form>\n              <p class=\"error mt-2\">{{ error }}</p>\n          </div>\n      </div>\n  </div>\n</template>\n\n<script>\nimport { apiService } from \"../common/api.service\";\n\nexport default {\n  name: \"previousAnsweror\",\n\n  props: {\n    id:{\n      type: Number,\n      required: true\n    },\n    previousAnswer:{\n      type: String,\n      required: true\n    },\n    messageSlug: {\n      type: String,\n      required:true\n    }\n  },\n\n  async beforeRouteEnter(to, from, next) {\n      let endpoint = `/api/answers/${to.params.id}/`\n      await apiService(endpoint)\n              .then(data => {\n                  to.params.previousAnswer = data.body;\n                  to.params.messageSlug = data.message_slug;\n      })\n    return next();\n  },\n\n  data() {\n    return{\n      answerBody: this.previousAnswer,\n      error: null\n    }\n  },\n\n  methods: {\n    onSubmit() {\n      if(this.answerBody){\n         let endpoint = `/api/answers/${this.id}/`;\n         apiService(endpoint, \"PUT\", { body: this.answerBody })\n        .then(() => {\n            this.$router.push({ //reindirizzamento alla pagina message\n                name: \"message\",\n                params: { slug: this.messageSlug }\n            })\n        })\n    } else {\n      this.error = \"Il campo  non può essere vuoto!\";\n    }\n  }\n}\n  // methods: {\n  //   async getAnswerData() {\n  //     let endpoint = `/api/answers/${this.id}/`\n  //     await apiService(endpoint)\n  //             .then(data => {\n  //                 this.answerBody = data.body;\n  //             })\n  //   }\n  // },\n  //\n  // created() {\n  //   this.getAnswerData();\n  // }\n}\n</script>\n\n<style lang=\"css\" scoped>\n</style>\n"]}]}